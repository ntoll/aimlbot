using System;
using System.Xml;
using AIMLbot.Utils;

namespace ExampleCustomAIMLTags
{
    /// <summary>
    /// A simple example to provide a template for a custom tag handler.
    /// 
    /// The recipe is as follows:
    /// 
    /// 1. Create a new library project to contain your custom tag classes.
    /// 2. Add the AIMLbot dll as a reference to your project
    /// 3. Create a public class with the same name as the tag you wish to handle
    /// 4. Reference System.Xml and AIMLbot.Utils
    /// 5. Add the [CustomTag] attribute to the class
    /// 6. Create a default constructor that puts something in the "this.inputString" attribute. (This is
    /// because AIMLTagHandler inherits from the TextTransformer class and because of limitations with
    /// instantiating late bound classes cannot call the "regular" AIMLTagHandler constructor that would 
    /// put the XML node's InnerText into inputString). In any case this.inputString is not used by 
    /// AIMLTagHandlers as they have direct access to the node to be processed (among other things - see below).
    /// 7. Override the ProcessChange() method. This is where the work happens. Nota Bene: It is good 
    /// practice to check the name of the node being processed and return string.Empty if it doesn't match.
    /// 
    /// When working within ProcessChange you have access to the following useful objects:
    /// 
    /// this.templateNode - An XmlNode object that represents the tag you're processing
    /// this.bot - An instance of AIMLbot.Bot that represents the bot that is currently processing the input
    /// this.user - An instance of AIMLbot.User that represents the user who originated the current input
    /// this.request - An instance of AIMLbot.Request that encapsulates all sorts of useful information about
    /// the input from the user
    /// this.result - An instance of AIMLbot.Result that encapsulates all sorts of useful information about 
    /// the output generated by the bot.
    /// 
    /// Finally to load the dll into your bot call the loadCustomTagHandlers(string pathToDLL) method of the
    /// AIMLbot.Bot object that is your bot. An exception will be raised if you attempt to duplicate tag
    /// handling.
    /// 
    /// Have fun!
    /// </summary>
    [CustomTag]
    public class testtag : AIMLTagHandler
    {
        public testtag()
        {
            this.inputString = "testtag";
        }

        protected override string ProcessChange()
        {
            if (this.templateNode.Name.ToLower() == "testtag")
            {
                return "Test tag works! "+this.templateNode.InnerText;
            }
            return string.Empty;
        }
    }
}
